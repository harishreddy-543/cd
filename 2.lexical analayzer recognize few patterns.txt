Lex Code: lexical.l
%{
#include <stdio.h>
%}

%%

[ \t\n]+             ; // Ignore whitespace

"//".*               { printf("Single-line comment: %s\n", yytext); }

"/*"([^*]|\*+[^*/])*\*+"/"   { printf("Multi-line comment: %s\n", yytext); }

[0-9]+\.[0-9]+       { printf("Float constant: %s\n", yytext); }
[0-9]+               { printf("Integer constant: %s\n", yytext); }

"=="|"!="|">="|"<="|">"|"<"  { printf("Relational operator: %s\n", yytext); }
"="                        { printf("Assignment operator: %s\n", yytext); }
"*"|"+"|"-"|"/"            { printf("Arithmetic operator: %s\n", yytext); }

[a-zA-Z_][a-zA-Z0-9_]* { printf("Identifier: %s\n", yytext); }

[(){};,]              { printf("Delimiter: %s\n", yytext); }

.                     { printf("Unrecognized character: %s\n", yytext); }

%%

int main() {
    printf("Enter code (Ctrl+D to end):\n");
    yylex();
    return 0;
}

int yywrap() {
    return 1;
}
